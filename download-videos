#!/usr/bin/env python2.7

"""
    Download youtube videos and open them after finish in an infinite cycle.
"""

import os
import re
import sys
import time
import webbrowser
import subprocess as sp
from contextlib import closing
import threading


jobs = []

CARRIAGE_BACK = '\r'
CLEAR_LINE = '\x1b[K'
NEW_LINE = '\n'

down_re = re.compile(r'\[download\] (?P<filename>.*) has already been downloaded')
dest_re = re.compile(r'Destination: (?P<filename>.*)$', re.MULTILINE)


def writeout(line):
    sys.stdout.write(line)
    sys.stdout.flush()


def print_and_save_output(proc):
    output = []
    while proc.poll() is None:
        line = proc.stdout.readline()
        if line.startswith('[download]'):
            line = CARRIAGE_BACK + CLEAR_LINE + line.rstrip()
            # line = NEW_LINE + line.rstrip()
        writeout(line)
        output.append(line)
    writeout(NEW_LINE * 2)
    return ''.join(output)


def process_jobs():
    """Download one video at a time."""
    while True:
        if not jobs:
            time.sleep(0.1)
            continue
        link = jobs.pop()
        params = ['youtube-dl', link]
        proc = sp.Popen(params, stdout=sp.PIPE, stderr=sp.STDOUT, universal_newlines=True)
        output = print_and_save_output(proc)
        m = down_re.search(output)
        if not m:
            m = dest_re.search(output)
        webbrowser.open(m.group('filename'))


def main():
    while True:
        print 'Folder:', os.getcwd()
        link = raw_input('Link to download: ')
        if not link:
            print
            continue
        elif not link.startswith('http'):
            print 'Not a link: %s' % link, NEW_LINE * 2
            continue
        jobs.append(link)
        print "Link added to the queue"


if __name__ == '__main__':
    try:
        processing_thread = threading.Thread(target=process_jobs)
        processing_thread.daemon = True
        processing_thread.start()
        main()
    except KeyboardInterrupt:
        pass
